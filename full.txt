lis
________________________________________
# โจทย์: ลำดับเพิ่มขึ้นย่อยที่ยาวที่สุด (Longest Increasing Subsequence: LIS)

## คำอธิบาย

กำหนดให้มีลำดับของจำนวนเต็ม `arr` จงหาความยาวของลำดับเพิ่มขึ้นย่อยที่ยาวที่สุด (Longest Increasing Subsequence: LIS) ของ `arr`

ลำดับเพิ่มขึ้นย่อย คือลำดับที่ได้จากการลบสมาชิกบางตัว (หรือไม่มีเลย) ออกจากลำดับเดิม โดยที่ลำดับย่อยนั้นยังคงเรียงลำดับจากน้อยไปมาก

**ตัวอย่าง:**

`arr = [1, 3, 2, 4, 5]`

LIS คือ `[1, 2, 4, 5]` หรือ `[1, 3, 4, 5]` ซึ่งมีความยาวเท่ากับ 4

## ข้อมูลนำเข้า

*   `arr`: `vector<int>` - ลำดับของจำนวนเต็ม

## ข้อมูลส่งออก

*   `int`: ความยาวของ LIS

## ข้อกำหนด

*   `1 <= arr.size() <= 2500`
*   `-10^4 <= arr[i] <= 10^4`

## ตัวอย่าง

| Input (arr)       | Output |
| ----------------- | ------ |
| `[1, 3, 2, 4, 5]` | `4`    |
| `[10, 9, 2, 5, 3, 7, 101, 18]` | `4`    |
| `[0, 1, 0, 3, 2, 3]` | `4`    |

## วิธี execute

เข้าไปที่ directory `lis`
รันคำสั่ง `make run build`
________________________________________
CC = g++
CFLAGS = -Wall -Wextra -std=c++17

# Source files
SRC_DIR = src
TEST_DIR = tests
INCLUDE_DIR = include
BUILD_DIR = build

SOURCES = $(wildcard $(SRC_DIR)/*.cpp)
TEST_SOURCES = $(wildcard $(TEST_DIR)/*.cpp)
INCLUDES = $(wildcard $(INCLUDE_DIR)/*.h)

OBJECTS = $(SOURCES:$(SRC_DIR)/%.cpp=$(BUILD_DIR)/%.o)
TEST_OBJECTS = $(TEST_SOURCES:$(TEST_DIR)/%.cpp=$(BUILD_DIR)/%.o)

TARGET = lis
TEST_TARGET = run_tests

# Build rules
all: $(TARGET)

$(TARGET): $(OBJECTS)
	$(CC) $(CFLAGS) $(OBJECTS) -o $(BUILD_DIR)/$(TARGET)

$(BUILD_DIR)/%.o: $(SRC_DIR)/%.cpp $(INCLUDES)
	@mkdir -p $(BUILD_DIR)
	$(CC) $(CFLAGS) -I$(INCLUDE_DIR) -c $< -o $@

test: $(TEST_TARGET)

$(TEST_TARGET): $(OBJECTS) $(TEST_OBJECTS)
	$(CC) $(CFLAGS) $(OBJECTS) $(TEST_OBJECTS) -o $(BUILD_DIR)/$(TEST_TARGET)

$(BUILD_DIR)/%.o: $(TEST_DIR)/%.cpp $(INCLUDES)
	@mkdir -p $(BUILD_DIR)
	$(CC) $(CFLAGS) -I$(INCLUDE_DIR) -c $< -o $@

run: test
	$(BUILD_DIR)/$(TEST_TARGET)

clean:
	rm -rf $(BUILD_DIR)

.PHONY: all clean test run
________________________________________
#ifndef LIS_H
#define LIS_H

#include <vector>

int lis(const std::vector<int>& arr);

#endif
________________________________________
#include <iostream>
#include <vector>

#include "lis.h"

int main() {
    std::cout << "Running tests...\n";

    int score = 0;

    // Test case 1
    std::vector<int> arr1 = {1, 3, 2, 4, 5};
    int expected1 = 4;
    int result1 = lis(arr1);
    if (result1 == expected1) {
        std::cout << "Test case 1: ✅ +10\n";
        score += 10;
    } else {
        std::cout << "Test case 1: ❌ (Expected " << expected1 << ", got " << result1 << ")\n";
    }

    // Test case 2
    std::vector<int> arr2 = {10, 9, 2, 5, 3, 7, 101, 18};
    int expected2 = 4;
    int result2 = lis(arr2);
    if (result2 == expected2) {
        std::cout << "Test case 2: ✅ +10\n";
        score += 10;
    } else {
        std::cout << "Test case 2: ❌ (Expected " << expected2 << ", got " << result2 << ")\n";
    }

    // Test case 3
    std::vector<int> arr3 = {0, 1, 0, 3, 2, 3};
    int expected3 = 4;
    int result3 = lis(arr3);
    if (result3 == expected3) {
        std::cout << "Test case 3: ✅ +10\n";
        score += 10;
    } else {
        std::cout << "Test case 3: ❌ (Expected " << expected3 << ", got " << result3 << ")\n";
    }

    // Test case 4
     std::vector<int> arr4 = {1, 3, 6, 7, 9, 4, 10, 5, 6};
    int expected4 = 6;
    int result4 = lis(arr4);
    if (result4 == expected4) {
        std::cout << "Test case 4: ✅ +10\n";
        score += 10;
    } else {
        std::cout << "Test case 4: ❌ (Expected " << expected4 << ", got " << result4 << ")\n";
    }

    // Test case 5
    std::vector<int> arr5 = {5, 4, 3, 2, 1};
    int expected5 = 1;
    int result5 = lis(arr5);
    if (result5 == expected5) {
        std::cout << "Test case 5: ✅ +10\n";
        score += 10;
    } else {
        std::cout << "Test case 5: ❌ (Expected " << expected5 << ", got " << result5 << ")\n";
    }

     // Test case 6
    std::vector<int> arr6 = {1, 1, 1, 1, 1};
    int expected6 = 1;
    int result6 = lis(arr6);
    if (result6 == expected6) {
        std::cout << "Test case 6: ✅ +10\n";
        score += 10;
    } else {
        std::cout << "Test case 6: ❌ (Expected " << expected6 << ", got " << result6 << ")\n";
    }

    // Test case 7
    std::vector<int> arr7 = {1};
    int expected7 = 1;
    int result7 = lis(arr7);
    if (result7 == expected7) {
        std::cout << "Test case 7: ✅ +10\n";
        score += 10;
    } else {
        std::cout << "Test case 7: ❌ (Expected " << expected7 << ", got " << result7 << ")\n";
    }

    // Test case 8
    std::vector<int> arr8 = {};
    int expected8 = 0;
    int result8 = lis(arr8);
    if (result8 == expected8) {
        std::cout << "Test case 8: ✅ +10\n";
        score += 10;
    } else {
        std::cout << "Test case 8: ❌ (Expected " << expected8 << ", got " << result8 << ")\n";
    }

    // Test case 9
    std::vector<int> arr9 = {7,7,7,7,7,7};
    int expected9 = 1;
    int result9 = lis(arr9);
    if (result9 == expected9) {
        std::cout << "Test case 9: ✅ +10\n";
        score += 10;
    } else {
        std::cout << "Test case 9: ❌ (Expected " << expected9 << ", got " << result9 << ")\n";
    }

    // Test case 10
    std::vector<int> arr10 = {5, 15, 5, 10, 10, 5, 20, 25};
    int expected10 = 5;
    int result10 = lis(arr10);
    if (result10 == expected10) {
        std::cout << "Test case 10: ✅ +10\n";
        score += 10;
    } else {
        std::cout << "Test case 10: ❌ (Expected " << expected10 << ", got " << result10 << ")\n";
    }


    std::cout << "Total score: " << score << "/100\n";

    return 0;
}
________________________________________
#include "lis.h"
#include <vector>
#include <algorithm>

int lis(const std::vector<int>& arr) {
    if (arr.empty()) {
        return 0;
    }

    std::vector<int> tail;
    for (int x : arr) {
        if (tail.empty() || x > tail.back()) {
            tail.push_back(x);
        } else {
            *std::lower_bound(tail.begin(), tail.end(), x) = x;
        }
    }

    return tail.size();
}