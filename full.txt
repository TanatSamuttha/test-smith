lis
________________________________________
# โจทย์: ลำดับเพิ่มขึ้นยาวที่สุด (Longest Increasing Subsequence)

## คำอธิบาย

จงเขียนโปรแกรมเพื่อหาความยาวของลำดับเพิ่มขึ้นที่ยาวที่สุด (Longest Increasing Subsequence หรือ LIS) ใน array ที่กำหนดให้

**ลำดับเพิ่มขึ้น** คือ ลำดับที่สมาชิกแต่ละตัวมีค่ามากกว่าหรือเท่ากับสมาชิกตัวก่อนหน้า (a[i] <= a[i+1])

**ตัวอย่าง:**

ถ้า array คือ `[1, 3, 2, 4, 5]` ลำดับเพิ่มขึ้นที่ยาวที่สุดคือ `[1, 2, 4, 5]` มีความยาว 4

ถ้า array คือ `[10, 9, 2, 5, 3, 7, 101, 18]` ลำดับเพิ่มขึ้นที่ยาวที่สุดคือ `[2, 3, 7, 18]` มีความยาว 4

## ข้อมูลนำเข้า

*   `arr`: `vector<int>` แทน array ของจำนวนเต็ม

## ข้อมูลส่งออก

*   `int`: ความยาวของลำดับเพิ่มขึ้นที่ยาวที่สุด

## ข้อกำหนด

*   สามารถใช้ `vector` และ `std` เท่านั้น
*   ห้ามใช้ไลบรารีพิเศษอื่น ๆ
*   `1 <= arr.size() <= 2500`
*   `-10^4 <= arr[i] <= 10^4`

## ตัวอย่าง

**Input:** `[1, 3, 2, 4, 5]`

**Output:** `4`

**Input:** `[10, 9, 2, 5, 3, 7, 101, 18]`

**Output:** `4`

## วิธี execute
เข้าไปที่ directory lis
รันคำสั่ง `make run build`
________________________________________
CC = g++
CFLAGS = -Wall -g -std=c++11

# Source files
SRC_DIR = src
TEST_DIR = tests
INCLUDE_DIR = include
BUILD_DIR = build

SOURCES = $(wildcard $(SRC_DIR)/*.cpp)
TEST_SOURCES = $(wildcard $(TEST_DIR)/*.cpp)
OBJECTS = $(SOURCES:.cpp=.o)
TEST_OBJECTS = $(TEST_SOURCES:.cpp=.o)

TARGET = lis
TEST_TARGET = test

# Build rules
all: $(TARGET)

$(TARGET): $(OBJECTS)
	$(CC) $(CFLAGS) $(OBJECTS) -o $(BUILD_DIR)/$(TARGET)

$(BUILD_DIR)/%.o: $(SRC_DIR)/%.cpp
	@mkdir -p $(BUILD_DIR)
	$(CC) $(CFLAGS) -I$(INCLUDE_DIR) -c $< -o $(BUILD_DIR)/$@

test: $(TEST_TARGET)

$(TEST_TARGET): $(OBJECTS) $(TEST_OBJECTS)
	$(CC) $(CFLAGS) $(OBJECTS) $(TEST_OBJECTS) -o $(BUILD_DIR)/$(TEST_TARGET)

$(BUILD_DIR)/%.o: $(TEST_DIR)/%.cpp
	@mkdir -p $(BUILD_DIR)
	$(CC) $(CFLAGS) -I$(INCLUDE_DIR) -c $< -o $(BUILD_DIR)/$@

run:
	$(BUILD_DIR)/$(TEST_TARGET)

clean:
	rm -rf $(BUILD_DIR)/*

rebuild: clean all
________________________________________
#ifndef LIS_H
#define LIS_H

#include <vector>

int lis(const std::vector<int>& arr);

#endif
________________________________________
#include <iostream>
#include <vector>

int main() {
    std::vector<std::vector<int>> test_cases = {
        {1, 3, 2, 4, 5},
        {10, 9, 2, 5, 3, 7, 101, 18},
        {1, 2, 3, 4, 5},
        {5, 4, 3, 2, 1},
        {1, 3, 6, 7, 9, 4, 10, 5, 6},
        {0, 1, 0, 3, 2, 3},
        {7, 7, 7, 7, 7, 7, 7},
        {1},
        {5, 8, 9, 1, 2, 3, 4},
        {5, 6, 7, 1, 2, 8, 9}
    };

    std::vector<int> expected_outputs = {
        4,
        4,
        5,
        1,
        6,
        4,
        1,
        1,
        4,
        5
    };

    int score = 0;
    for (size_t i = 0; i < test_cases.size(); ++i) {
        int result = lis(test_cases[i]);
        if (result == expected_outputs[i]) {
            std::cout << "Test Case " << i + 1 << ": ✅ +10" << std::endl;
            score += 10;
        } else {
            std::cout << "Test Case " << i + 1 << ": ❌ Expected " << expected_outputs[i] << ", got " << result << std::endl;
        }
    }

    std::cout << "Total Score: " << score << "/" << test_cases.size() * 10 << std::endl;

    return 0;
}
________________________________________
#include "include/lis.h"
#include <vector>
#include <algorithm>

int lis(const std::vector<int>& arr) {
    if (arr.empty()) {
        return 0;
    }

    std::vector<int> dp;
    for (int num : arr) {
        auto it = std::lower_bound(dp.begin(), dp.end(), num);
        if (it == dp.end()) {
            dp.push_back(num);
        } else {
            *it = num;
        }
    }

    return dp.size();
}