fibonacci_sequence
________________________________________
# ‡πÇ‡∏à‡∏ó‡∏¢‡πå Fibonacci Sequence

‡∏à‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏´‡∏≤‡πÄ‡∏•‡∏Ç Fibonacci ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà n ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:

*   F(0) = 0
*   F(1) = 1
*   F(n) = F(n-1) + F(n-2) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö n > 1

**Input:**

*   `n`: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö (n >= 0) ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏á Fibonacci ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì

**Output:**

*   ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡∏Ç Fibonacci ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà n

**‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î:**

*   ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ recursion (recursion ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ test case ‡∏ó‡∏µ‡πà n ‡πÄ‡∏¢‡∏≠‡∏∞‡πÜ ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô)
*   ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ `std::vector` ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ
*   ‡πÉ‡∏ä‡πâ `unsigned long long` ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö return ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ Fibonacci ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà

**‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:**

| Input (n) | Output (F(n)) |
| --------- | -------------- |
| 0         | 0              |
| 1         | 1              |
| 2         | 1              |
| 3         | 2              |
| 10        | 55             |
| 45        | 1134903170     |

## ‡∏ß‡∏¥‡∏ò‡∏µ execute
‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà directory fibonacci_sequence
‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á make run build
________________________________________
CXX = g++
CXXFLAGS = -std=c++17 -Wall -Iinclude
SRC_DIR = src
TEST_DIR = tests
BUILD_DIR = build

all: $(BUILD_DIR)/main

$(BUILD_DIR)/main: $(SRC_DIR)/fibonacci_sequence.cpp $(TEST_DIR)/main.cpp
	mkdir -p $(BUILD_DIR)
	$(CXX) $(CXXFLAGS) $(SRC_DIR)/fibonacci_sequence.cpp $(TEST_DIR)/main.cpp -o $(BUILD_DIR)/main

run: all
	./$(BUILD_DIR)/main

clean:
	rm -rf $(BUILD_DIR)
________________________________________
#ifndef FIBONACCI_SEQUENCE_H#define FIBONACCI_SEQUENCE_H
#include <vector>
int fibonacci_sequence(int n);
#endif // FIBONACCI_SEQUENCE_H
________________________________________
#include "fibonacci_sequence.h"
#include <iostream>
#include <cassert>
using namespace std;

int main() {
    int score = 0;

    vector<pair<int, int>> testCases = {
        {0, 0}, {1, 1}, {2, 1}, {3, 2}, {4, 3},
        {5, 5}, {6, 8}, {7, 13}, {8, 21}, {10, 55}
    };

    for (size_t i = 0; i < testCases.size(); ++i) {
        int n = testCases[i].first;
        int expected = testCases[i].second;
        int result = fibonacci_sequence(n);
        if (result == expected) {
            cout << "Test " << i + 1 << " ‚úÖ (+10 points)\n";
            score += 10;
        } else {
            cout << "Test " << i + 1 << " ‚ùå (Expected : " << expected << ", Given : " << result << ")\n";
        }
    }

    cout << "\nüéØ Total Score : " << score << " / 100\n";
    return 0;
}
________________________________________
#include "fibonacci_sequence.h"
#include <vector>

using namespace std;

int fibonacci_sequence(int n) {
¬† ¬† // add your code here¬† ¬† ¬† ¬† 
	return -1 ;
}